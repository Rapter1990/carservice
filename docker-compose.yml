services:

  database:
    container_name: database
    image: mysql:8.0.33
    restart: always
    env_file:
      - .env  # Use the .env file for environment variables
    environment:
      MYSQL_DATABASE: carservicedatabase
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_HOST: '%'
      MYSQL_PORT: 3307
    volumes:
      - ./db:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - carserviceNetwork


  carservice:
    image: 'carservice:latest'
    build:
      context: .
      dockerfile: Dockerfile
    container_name: carservice
    restart: on-failure
    env_file:
      - .env  # Use the .env file for environment variables
    ports:
      - "4110:4110"
    environment:
      - server.port=4110
      - spring.datasource.username=${DATABASE_USERNAME}
      - spring.datasource.password=${DATABASE_PASSWORD}
      - WORK_PERMISSION_DB_IP=database
      - WORK_PERMISSION_DB_PORT=3307
      - spring.datasource.url=jdbc:mysql://host.docker.internal:3307/carservicedatabase
    depends_on:
      - database
      - sonarqube
    networks:
      - carserviceNetwork

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./data/prometheus/config:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - carserviceNetwork

  grafana:
    image: "grafana/grafana-oss:latest"
    pull_policy: always
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=${GF_SMTP_ENABLED}
      - GF_SMTP_HOST=${GF_SMTP_HOST}
      - GF_SMTP_USER=${GF_SMTP_USER}
      - GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
      - GF_SMTP_SKIP_VERIFY=${GF_SMTP_SKIP_VERIFY}
      - GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS}
    networks:
      - carserviceNetwork

  alertmanager:
    build:
      context: ./data/alertmanager
      dockerfile: Dockerfile
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    env_file:
      - .env
    networks:
      - carserviceNetwork

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - database
    networks:
      - carserviceNetwork

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

networks:
  carserviceNetwork: